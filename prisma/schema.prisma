// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String?  @unique
  password    String?
  phone       String?  @unique
  github_id   String?  @unique
  profile_img String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  verificationCode VerificationCode[]
  product          Product[]
  post             Post[]
  comment          Comment[]
  like             Like[]
}

model VerificationCode {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  photo       String
  price       Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  // user를 삭제하면 user가 등록한 Product도 제거됨
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // user를 삭제하면 user가 등록한 Post도 제거됨
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  comments Comment[]
  likes    Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  // post를 삭제하면 post에 존재하는 Comment도 제거됨
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
  // post를 삭제하면 post에 존재하는 Like도 제거됨
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int      @unique

  @@id(name: "id", [userId, postId])
}
